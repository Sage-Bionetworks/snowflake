USE ROLE PUBLIC;
USE WAREHOUSE COMPUTE_ORG;
USE DATABASE SYNAPSE_DATA_WAREHOUSE;

// File extensions
SELECT * FROM SYNAPSE_DATA_WAREHOUSE.SYNAPSE.NODE_LATEST LIMIT 10;
WITH FILE_EXTENSIONS AS (
    SELECT split_part(NAME, '.', -1) AS FILEEXT
    FROM SYNAPSE_DATA_WAREHOUSE.SYNAPSE.NODE_LATEST
)

SELECT
    FILEEXT,
    count(*) AS NUMBER_OF_FILES
FROM FILE_EXTENSIONS
GROUP BY FILEEXT
ORDER BY NUMBER_OF_FILES DESC;

-- * Can you extract which projects have these mp4's and the folder
-- names under which they are stored, as a next step?
WITH FILE_EXTENSIONS AS (
    SELECT
        PROJECT_ID,
        PARENT_ID,
        split_part(NAME, '.', -1) AS FILEEXT
    FROM
        SYNAPSE_DATA_WAREHOUSE.SYNAPSE.NODE_LATEST
)

SELECT DISTINCT PROJECT_ID
FROM
    FILE_EXTENSIONS
WHERE
    FILEEXT ILIKE 'MP4';

WITH FILE_EXTENSIONS AS (
    SELECT
        PROJECT_ID,
        PARENT_ID,
        split_part(NAME, '.', -1) AS FILEEXT
    FROM
        SYNAPSE_DATA_WAREHOUSE.SYNAPSE.NODE_LATEST
)

SELECT
    PROJECT_ID,
    count(*) AS NUMBER_OF_MP4S
FROM
    FILE_EXTENSIONS
WHERE
    FILEEXT ILIKE 'MP4'
GROUP BY PROJECT_ID
ORDER BY NUMBER_OF_MP4S DESC;

// Number of change events
SELECT
    CHANGE_TYPE,
    count(*) AS NUMBER_OF_EVENTS
FROM SYNAPSE_DATA_WAREHOUSE.SYNAPSE.FILE_LATEST
GROUP BY CHANGE_TYPE;

// Number of counts for different statuses
SELECT
    STATUS,
    count(*) AS STATUS_COUNT
FROM SYNAPSE_DATA_WAREHOUSE.SYNAPSE.FILE_LATEST
GROUP BY STATUS;

-- traffic via portals via "ORIGIN"> The host name of the portal making the request, e.g., https://staging.synapse.org, https://adknowledgeportal.synapse.org, https://dhealth.synapse.org.
SELECT
    ORIGIN,
    count(*) AS NUMBER_OF_REQUESTS,
    count(DISTINCT USER_ID) AS NUMBER_OF_UNIQUE_USERS
FROM
    SYNAPSE_DATA_WAREHOUSE.SYNAPSE.PROCESSEDACCESS
WHERE
    ORIGIN LIKE '%synapse.org'
    AND ORIGIN NOT LIKE '%staging%'
    AND RECORD_DATE > '2023-01-01'
GROUP BY ORIGIN
ORDER BY NUMBER_OF_REQUESTS DESC;

-- Top downloaded public projects since 2022-01-01
WITH DEDUP_FILEHANDLE AS (
    SELECT DISTINCT
        USER_ID,
        FILE_HANDLE_ID AS FD_FILE_HANDLE_ID,
        RECORD_DATE,
        PROJECT_ID
    FROM
        SYNAPSE_DATA_WAREHOUSE.SYNAPSE.FILEDOWNLOAD
),

PUBLIC_PROJECTS AS (
    SELECT DISTINCT PROJECT_ID
    FROM
        SYNAPSE_DATA_WAREHOUSE.SYNAPSE.NODE_LATEST
    WHERE
        IS_PUBLIC
        AND NODE_TYPE = 'project'
)

SELECT
    PROJECT_ID,
    count(*) AS DOWNLOADS_PER_PROJECT,
    count(DISTINCT USER_ID) AS NUMBER_OF_UNIQUE_USERS_DOWNLOADED,
    count(DISTINCT FD_FILE_HANDLE_ID) AS NUMBER_OF_UNIQUE_FILES_DOWNLOADED
FROM
    DEDUP_FILEHANDLE
WHERE
    PROJECT_ID IN (SELECT PROJECT_ID FROM PUBLIC_PROJECTS)
GROUP BY
    PROJECT_ID
ORDER BY
    DOWNLOADS_PER_PROJECT DESC;

-- Top downloaded public projects for September 2023

WITH DEDUP_FILEHANDLE AS (
    SELECT DISTINCT
        USER_ID,
        FILE_HANDLE_ID AS FD_FILE_HANDLE_ID,
        RECORD_DATE,
        PROJECT_ID
    FROM
        SYNAPSE_DATA_WAREHOUSE.SYNAPSE.FILEDOWNLOAD
    WHERE
        RECORD_DATE >= '2023-09-01' AND RECORD_DATE < '2023-10-01'
),

PUBLIC_PROJECTS AS (
    SELECT DISTINCT PROJECT_ID
    FROM
        SYNAPSE_DATA_WAREHOUSE.SYNAPSE.NODE_LATEST
    WHERE
        IS_PUBLIC
        AND NODE_TYPE = 'project'
)

SELECT
    PROJECT_ID,
    count(*) AS DOWNLOADS_PER_PROJECT,
    count(DISTINCT USER_ID) AS NUMBER_OF_UNIQUE_USERS_DOWNLOADED,
    count(DISTINCT FD_FILE_HANDLE_ID) AS NUMBER_OF_UNIQUE_FILES_DOWNLOADED
FROM
    DEDUP_FILEHANDLE
WHERE
    PROJECT_ID IN (SELECT PROJECT_ID FROM PUBLIC_PROJECTS)
GROUP BY
    PROJECT_ID
ORDER BY
    DOWNLOADS_PER_PROJECT DESC;

-- number of different governance types in synapse
WITH FILE_FD AS (
    SELECT
        ID AS FILE_ID,
        CONTENT_SIZE
    FROM
        SYNAPSE_DATA_WAREHOUSE.SYNAPSE.FILE_LATEST
)

SELECT
    NODE.IS_PUBLIC,
    NODE.IS_CONTROLLED,
    NODE.IS_RESTRICTED,
    count(*) AS NUMBER_OF_FILES,
    -- A terabyte is 2^40 bytes
    sum(NODE.CONTENT_SIZE) / power(2, 40) AS TOTAL_SIZE_IN_TERABYTES
FROM
    SYNAPSE_DATA_WAREHOUSE.SYNAPSE.NODE_LATEST AS NODE
LEFT JOIN
    FILE_FD
    ON
        NODE.FILE_HANDLE_ID = FILE_FD.FILE_ID
WHERE
    NODE.NODE_TYPE = 'file'
GROUP BY
    NODE.IS_PUBLIC, NODE.IS_CONTROLLED, NODE.IS_RESTRICTED
ORDER BY
    NUMBER_OF_FILES DESC;

-- get number of DOI calls
SELECT count(DISTINCT REQUEST_URL)
FROM
    SYNAPSE_DATA_WAREHOUSE.SYNAPSE.PROCESSEDACCESS
WHERE
    NORMALIZED_METHOD_SIGNATURE = 'GET /doi/async/get/#'
    AND SUCCESS;


-- client
SELECT
    CLIENT,
    count(*) AS NUMBER_OF_CALLS
FROM
    SYNAPSE_DATA_WAREHOUSE.SYNAPSE.PROCESSEDACCESS
GROUP BY
    CLIENT
ORDER BY
    NUMBER_OF_CALLS DESC;

-- users that downloaded the most
WITH DEDUP_FILEHANDLE AS (
    SELECT DISTINCT
        USER_ID,
        FILE_HANDLE_ID AS FD_FILE_HANDLE_ID,
        RECORD_DATE,
        PROJECT_ID
    FROM
        SYNAPSE_DATA_WAREHOUSE.SYNAPSE.FILEDOWNLOAD
),

USERS AS (
    SELECT
        ID,
        USER_NAME,
        LOCATION,
        COMPANY
    FROM
        SYNAPSE_DATA_WAREHOUSE.SYNAPSE.USERPROFILE_LATEST
)

SELECT
    USERS.ID,
    USERS.USER_NAME,
    USERS.LOCATION,
    USERS.COMPANY,
    count(*) AS NUMBER_OF_DOWNLOADS
FROM
    DEDUP_FILEHANDLE
LEFT JOIN
    USERS
    ON
        DEDUP_FILEHANDLE.USER_ID = USERS.ID
GROUP BY
    USERS.ID, USERS.USER_NAME, USERS.LOCATION, USERS.COMPANY
ORDER BY
    NUMBER_OF_DOWNLOADS DESC;

-- locations based on what users put on their most current user profiles
-- NOTE: this does not mean the downloads have to happen
-- from that location, what users have in their user profile could
-- be wrong.
WITH DEDUP_FILEHANDLE AS (
    SELECT DISTINCT
        USER_ID,
        FILE_HANDLE_ID AS FD_FILE_HANDLE_ID,
        RECORD_DATE,
        PROJECT_ID
    FROM
        SYNAPSE_DATA_WAREHOUSE.SYNAPSE.FILEDOWNLOAD
),

USERS AS (
    SELECT
        ID,
        USER_NAME,
        LOCATION,
        COMPANY
    FROM
        SYNAPSE_DATA_WAREHOUSE.SYNAPSE.USERPROFILE_LATEST
)

SELECT
    USERS.LOCATION,
    count(*) AS NUMBER_OF_DOWNLOADS
FROM
    DEDUP_FILEHANDLE
LEFT JOIN
    USERS
    ON
        DEDUP_FILEHANDLE.USER_ID = USERS.ID
GROUP BY
    USERS.LOCATION
ORDER BY
    NUMBER_OF_DOWNLOADS DESC;
